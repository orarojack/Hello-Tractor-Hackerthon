// @prettier/plugin-ruby@4.0.4 downloaded from https://ga.jspm.io/npm:@prettier/plugin-ruby@4.0.4/src/plugin.js

import{spawn as e}from"child_process";import r from"fs";import t from"net";import n from"os";import i from"path";import a from"process";import s from"url";import{resolveConfigFile as o}from"prettier";function getLang(){const{env:e,platform:r}=a;const t=e.LC_ALL||e.LC_CTYPE||e.LANG;return t&&t.includes("UTF-8")?t:{aix:"C.UTF-8",android:"C.UTF-8",cygwin:"C.UTF-8",darwin:"en_US.UTF-8",freebsd:"C.UTF-8",haiku:"C.UTF-8",linux:"C.UTF-8",netbsd:"C.UTF-8",openbsd:"C.UTF-8",sunos:"C.UTF-8",win32:".UTF-8"}[r]}function getPlugins(e){const r=new Set;const t=e.rubyPlugins.trim();t.length>0&&t.split(",").forEach((e=>r.add(e.trim())));e.rubySingleQuote&&r.add("plugin/single_quotes");e.trailingComma!=="none"&&r.add("plugin/trailing_comma");return Array.from(r)}async function spawnServer(t,l=true){const u=n.tmpdir();const p=i.join(u,`prettier-ruby-parser-${a.pid}.txt`);const c={env:Object.assign({},a.env,{LANG:getLang()}),stdio:["ignore","ignore","inherit"],detached:true};if(t.filepath){const e=await o(t.filepath);c.cwd=i.dirname(e)}const f=e(t.rubyExecutablePath||"ruby",[s.fileURLToPath(new URL("./server.rb",import.meta.url)),`--plugins=${getPlugins(t).join(",")}`,p],c);f.unref();l&&a.on("exit",(()=>{r.existsSync(p)&&r.unlinkSync(p);try{if(f.pid){const e=a.platform==="win32"?f.pid:-f.pid;a.kill(e)}}catch(e){}}));return new Promise(((e,t)=>{const n=setInterval((()=>{if(r.existsSync(p)){const t=r.readFileSync(p).toString("utf-8");e({serverPID:f.pid,connectionFilepath:p,connectionOptions:JSON.parse(t)});clearTimeout(i);clearInterval(n)}else if(f.exitCode){t(new Error("Failed to start parse server."));clearTimeout(i);clearInterval(n)}}),100);const i=setTimeout((()=>{const e="Failed to get connection options from parse server in time. If this happens repeatedly, try increasing the PRETTIER_RUBY_TIMEOUT_MS environment variable beyond 10000.";clearInterval(n);t(new Error(e))}),parseInt(a.env.PRETTIER_RUBY_TIMEOUT_MS||"10000",10))}))}let l;a.env.PRETTIER_RUBY_HOST&&(l=JSON.parse(a.env.PRETTIER_RUBY_HOST));async function parse(e,r,n){if(!l){const e=await spawnServer(n);l=e.connectionOptions}return new Promise(((i,a)=>{const s=new t.Socket;let o="";s.on("error",(e=>{a(e)}));s.on("data",(e=>{o+=e.toString("utf-8")}));s.on("end",(()=>{const e=JSON.parse(o);if(e.error){const r=new Error(e.error);e.loc&&(r.loc=e.loc);a(r)}i(e)}));s.connect(l,(()=>{s.end(JSON.stringify({parser:e,source:r,maxwidth:n.printWidth,tabwidth:n.tabWidth}))}))}))}const u={languages:[{name:"Ruby",parsers:["ruby"],extensions:[".arb",".axlsx",".builder",".eye",".fcgi",".gemfile",".gemspec",".god",".jb",".jbuilder",".mspec",".opal",".pluginspec",".podspec",".rabl",".rake",".rb",".rbi",".rbuild",".rbw",".rbx",".ru",".ruby",".thor",".watchr"],filenames:[".irbrc",".pryrc",".simplecov","Appraisals","Berksfile","Brewfile","Buildfile","Capfile","Cheffile","Dangerfile","Deliverfile","Fastfile","Gemfile","Guardfile","Jarfile","Mavenfile","Podfile","Puppetfile","Rakefile","Snapfile","Thorfile","Vagabondfile","Vagrantfile","buildfile"],interpreters:["jruby","macruby","rake","rbx","ruby"],linguistLanguageId:326,vscodeLanguageIds:["ruby"]},{name:"RBS",parsers:["rbs"],extensions:[".rbs"]},{name:"HAML",parsers:["haml"],extensions:[".haml"],vscodeLanguageIds:["haml"]}],parsers:{ruby:{parse(e,r){return parse("ruby",e,r)},astFormat:"ruby",hasPragma(e){return/^\s*#[^\S\n]*@(?:prettier|format)\s*?(?:\n|$)/m.test(e)},locStart(){return 0},locEnd(){return 0}},rbs:{parse(e,r){return parse("rbs",e,r)},astFormat:"rbs",hasPragma(e){return/^\s*#[^\S\n]*@(prettier|format)\s*(\n|$)/.test(e)},locStart(){return 0},locEnd(){return 0}},haml:{parse(e,r){return parse("haml",e,r)},astFormat:"haml",hasPragma(e){return/^\s*-#\s*@(prettier|format)/.test(e)},locStart(){return 0},locEnd(){return 0}}},printers:{ruby:{print(e){return e.getValue()},insertPragma(e){return`# @format${e.startsWith("#")?"\n":"\n\n"}${e}`}},rbs:{print(e){return e.getValue()},insertPragma(e){return`# @format${e.startsWith("#")?"\n":"\n\n"}${e}`}},haml:{print(e){return e.getValue()},insertPragma(e){return`-# @format${e.startsWith("-#")?"\n":"\n\n"}${e}`}}},options:{rubyPlugins:{type:"string",category:"Ruby",default:"",description:"The comma-separated list of plugins to require.",since:"3.1.0"},rubySingleQuote:{type:"boolean",category:"Ruby",default:false,description:"When double quotes are not necessary for interpolation, prefers the use of single quotes for string literals.",since:"1.0.0"},rubyExecutablePath:{type:"string",category:"Ruby",default:"ruby",description:"The path to the Ruby executable to use to run the formatter.",since:"3.3.0"}},defaultOptions:{printWidth:80,tabWidth:2,trailingComma:"none",singleQuote:false}};export{u as default,spawnServer};

